{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Downloads\\\\Yash'sSalesWork\\\\frontend\\\\src\\\\components\\\\BarGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Box, Typography } from '@mui/material';\nimport axios from 'axios';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register the necessary components in Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst BarGraph = ({\n  month\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Number of Items',\n      data: [],\n      backgroundColor: '#4e73df',\n      borderColor: '#4e73df',\n      borderWidth: 1\n    }]\n  });\n  useEffect(() => {\n    fetchBarChartData();\n  }, [month]);\n\n  // Fetch the bar chart data from the API\n  const fetchBarChartData = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/barChart', {\n        params: {\n          month\n        }\n      });\n\n      // Ensure you're correctly accessing the data array from the response\n      const data = response.data.data; // Accessing the `data` array here\n\n      console.log(\"API Response Data:\", data); // Add debugging line to see the raw data\n\n      const formattedData = formatBarChartData(data);\n      setChartData(formattedData);\n    } catch (error) {\n      console.error('Error fetching bar chart data:', error);\n    }\n  };\n\n  // Format the fetched data to match the chart structure\n  const formatBarChartData = data => {\n    const priceRanges = ['0 - 100', '101 - 200', '201 - 300', '301 - 400', '401 - 500', '501 - 600', '601 - 700', '701 - 800', '801 - 900', '901 - above'];\n    const itemCounts = new Array(10).fill(0); // Initialize item counts for each price range\n\n    // Map the response data to the correct price range\n    data.forEach(item => {\n      const range = item.range;\n      let count = item.count;\n\n      // Ensure that count is an integer (removes decimals)\n      count = Math.floor(count); // Use Math.floor() to round down to an integer\n\n      const index = priceRanges.indexOf(range);\n      if (index !== -1) {\n        itemCounts[index] = count; // Store the integer count\n      }\n    });\n    console.log(\"Formatted Chart Data:\", itemCounts); // Debugging line to inspect the formatted data\n\n    return {\n      labels: priceRanges,\n      // Use the price ranges as labels on the X-axis\n      datasets: [{\n        label: 'Number of Items',\n        data: itemCounts,\n        // Use the formatted item counts\n        backgroundColor: '#4e73df',\n        // Color for bars\n        borderColor: '#4e73df',\n        borderWidth: 1\n      }]\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      padding: 3,\n      backgroundColor: '#f7f8fc',\n      borderRadius: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      component: \"h2\",\n      gutterBottom: true,\n      sx: {\n        color: '#2c3e50',\n        fontWeight: 'bold'\n      },\n      children: [\"Items in Price Range - \", month]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '500px' // Optional: Set a height for the container to ensure proper layout\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: `Number of Items in Price Ranges for ${month}`,\n              font: {\n                size: 18\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: tooltipItem => `${tooltipItem.raw.toFixed(0)} items` // Ensure count is displayed as an integer\n              }\n            }\n          },\n          scales: {\n            x: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Price Range'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Number of Items'\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(BarGraph, \"96Shcw/X1bnJjNlyZQ+ewaaiys4=\");\n_c = BarGraph;\nexport default BarGraph;\nvar _c;\n$RefreshReg$(_c, \"BarGraph\");","map":{"version":3,"names":["React","useState","useEffect","Bar","Box","Typography","axios","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","BarGraph","month","_s","chartData","setChartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","fetchBarChartData","response","get","params","console","log","formattedData","formatBarChartData","error","priceRanges","itemCounts","Array","fill","forEach","item","range","count","Math","floor","index","indexOf","sx","padding","borderRadius","children","variant","component","gutterBottom","color","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","alignItems","height","options","responsive","plugins","title","text","font","size","tooltip","callbacks","tooltipItem","raw","toFixed","scales","x","beginAtZero","y","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/Downloads/Yash'sSalesWork/frontend/src/components/BarGraph.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Box, Typography } from '@mui/material';\r\nimport axios from 'axios';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\n// Register the necessary components in Chart.js\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nconst BarGraph = ({ month }) => {\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        label: 'Number of Items',\r\n        data: [],\r\n        backgroundColor: '#4e73df',\r\n        borderColor: '#4e73df',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchBarChartData();\r\n  }, [month]);\r\n\r\n  // Fetch the bar chart data from the API\r\n  const fetchBarChartData = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/barChart', {\r\n        params: {\r\n          month,\r\n        },\r\n      });\r\n\r\n      // Ensure you're correctly accessing the data array from the response\r\n      const data = response.data.data; // Accessing the `data` array here\r\n\r\n      console.log(\"API Response Data:\", data); // Add debugging line to see the raw data\r\n\r\n      const formattedData = formatBarChartData(data);\r\n      setChartData(formattedData);\r\n    } catch (error) {\r\n      console.error('Error fetching bar chart data:', error);\r\n    }\r\n  };\r\n\r\n  // Format the fetched data to match the chart structure\r\n  const formatBarChartData = (data) => {\r\n    const priceRanges = [\r\n      '0 - 100',\r\n      '101 - 200',\r\n      '201 - 300',\r\n      '301 - 400',\r\n      '401 - 500',\r\n      '501 - 600',\r\n      '601 - 700',\r\n      '701 - 800',\r\n      '801 - 900',\r\n      '901 - above',\r\n    ];\r\n\r\n    const itemCounts = new Array(10).fill(0); // Initialize item counts for each price range\r\n\r\n    // Map the response data to the correct price range\r\n    data.forEach((item) => {\r\n      const range = item.range;\r\n      let count = item.count;\r\n\r\n      // Ensure that count is an integer (removes decimals)\r\n      count = Math.floor(count); // Use Math.floor() to round down to an integer\r\n\r\n      const index = priceRanges.indexOf(range);\r\n      if (index !== -1) {\r\n        itemCounts[index] = count;  // Store the integer count\r\n      }\r\n    });\r\n\r\n    console.log(\"Formatted Chart Data:\", itemCounts); // Debugging line to inspect the formatted data\r\n\r\n    return {\r\n      labels: priceRanges,  // Use the price ranges as labels on the X-axis\r\n      datasets: [\r\n        {\r\n          label: 'Number of Items',\r\n          data: itemCounts,  // Use the formatted item counts\r\n          backgroundColor: '#4e73df',  // Color for bars\r\n          borderColor: '#4e73df',\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ padding: 3, backgroundColor: '#f7f8fc', borderRadius: 2 }}>\r\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom sx={{ color: '#2c3e50', fontWeight: 'bold' }}>\r\n        Items in Price Range - {month}\r\n      </Typography>\r\n\r\n      {/* Centering the Bar chart */}\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          height: '500px', // Optional: Set a height for the container to ensure proper layout\r\n        }}\r\n      >\r\n        <Bar\r\n          data={chartData}\r\n          options={{\r\n            responsive: true,\r\n            plugins: {\r\n              title: {\r\n                display: true,\r\n                text: `Number of Items in Price Ranges for ${month}`,\r\n                font: {\r\n                  size: 18,\r\n                },\r\n              },\r\n              tooltip: {\r\n                callbacks: {\r\n                  label: (tooltipItem) => `${tooltipItem.raw.toFixed(0)} items`, // Ensure count is displayed as an integer\r\n                },\r\n              },\r\n            },\r\n            scales: {\r\n              x: {\r\n                beginAtZero: true,\r\n                title: {\r\n                  display: true,\r\n                  text: 'Price Range',\r\n                },\r\n              },\r\n              y: {\r\n                beginAtZero: true,\r\n                title: {\r\n                  display: true,\r\n                  text: 'Number of Items',\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BarGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}